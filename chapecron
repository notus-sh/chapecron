#!/bin/env bash

# Environment variables
: ${CHAPECRON_DEBUG:=0}
# These three ones exists only for tests purpose
: ${CHAPECRON_PATH_PREFIX:=}
: ${CHAPECRON_PLUGIN_PATTERN:='/*.sh'}
: ${CHAPECRON_BASH_VERSION:=${BASH_VERSINFO[0]}}


# Unofficial Bash strict mode
set -euo pipefail
[ $CHAPECRON_DEBUG = 1 ] && set -x
IFS=$'\n\t'


##
## Global variables
##
declare -r CHAPECRON_VERSION="1.0.0"
declare -r CHAPECRON_BIN="$(realpath $0)"

## Exit statuses
# See https://goo.gl/6uEMX3 for full reference
declare -r EX_USAGE=64					# Command used incorrectly
declare -r EX_UNAVAILABLE=69		# Unavailable dependency
declare -r EX_OSFILE=72					# Configuration file missing or wrong
declare -r EX_NOPERM=77					# Insufficient permissions
declare -r EX_CONFIG=78					# Missing or wrong configuration

## Command line arguments
declare COMMAND=''
# Default options
declare CONFIG_FILE=''
# Default flags
declare -i RECALL=0
declare -i VERBOSE=0
declare -i VERSION=0
declare -i HELP=0


#
# Utilities
#
string::trim() {
	local var=$(echo "$*"	| tr "\\n" " ")
	var="${var#"${var%%[![:space:]]*}"}"
	var="${var%"${var##*[![:space:]]}"}"
	echo -n "$var"
}

utils::log() {
	[ $VERBOSE -ge $1 ] || return 0

	local redirect=""
	[ $# -eq 3 ] && ([ "$3" == "stderr" ] || [ "$3" == "STDERR" ]) && redirect=" >&2"

	eval "echo \"$2\"$redirect"
}

utils::error() {
	utils::log 0 "$@" "stderr"
}

utils::info() {
	utils::log 1 "$@"
}

utils::debug() {
	utils::log 2 "$@"
}

utils::fail() {
	local exit_code=$1
	shift

	[ $# -gt 0 ] && utils::error "$@"
	exit $exit_code
}

#
# Array functions
#
array::search() {
	local needle=$1 value
	shift

	eval set -- $@
	for value in $@; do
		[ "$value" == "$needle" ] && return 0
	done
	return 1
}

array::merge() {
	local merged=() value

	eval set -- $@
	for value in $@; do
		if ( ! array::search $value ${merged[@]} ); then
			merged+=("$value")
		fi
	done

  echo "${merged[@]}"
}


#
# Dependency management
#
dependencies::getopt() {
	local exit_code

	set +e
	getopt --test > /dev/null
	exit_code=$?
	set -e

	[ $exit_code -ne 4 ] && return 1
	return 0
}

dependencies::bash4() {
	[ $CHAPECRON_BASH_VERSION -lt 4 ] && return 1
	return 0
}

dependencies::all() {
	dependencies::getopt || \
		utils::fail $EX_UNAVAILABLE \
								"Missing dependency: enhanced getopt"

	dependencies::bash4  || \
		utils::fail $EX_UNAVAILABLE \
								"Missing dependency: bash 4.0+"
}


#
# Command line options
#
options::version() {
	cat <<-_EOF
	chapecron - Look after your crons while you are away
	Version: $CHAPECRON_VERSION
	_EOF
}

options::usage() {
	options::version
	echo
	cat <<-USAGE
		Usage: chapecron [-v,--verbose] [--version] [-h,--help] [-c,--config CONFIG_FILE] -- COMMAND
		Options:
		  -c,--config   Specify a configuration file (See below)
		  -version      Print version informations and exit
		  -h,--help     Print this help and exit
		  -v,--verbose  More verbose output.
		                You can specify this option more than once

		By default, chapecron will look for configuration files at:

		- /etc/chapecron/chapecron.conf
		- XDG_CONFIG_HOME/chapecron/chapecron.conf
		  (usually ~/.config/chapecron/chapecron.conf)

		When specifying a configuration file as a command line option,
		only this file will be considered.
	USAGE
}

options::get() {
	local parsed

	parsed=$(getopt --options=hvc:r \
									--longoptions=help,verbose,config:,version \
									--name "$0" \
									-- "$@")
	eval set -- "$parsed"

	while :; do
		case "$1" in
			-r)
				RECALL=1
				shift
				;;
			-c|--config)
				CONFIG_FILE=$2
				shift 2
				;;
			-v|--verbose)
				VERBOSE+=1
				shift
				;;
			--version)
				VERSION=1
				shift
				;;
			-h|--help)
				HELP=1
				shift
				;;
			--)
				shift
				break
				;;
			*)
				utils::fail $EX_USAGE \
										"Unsupported option $1. Use $0 -h to get help"
				;;
		esac
	done

	[ $RECALL -eq 1 ] && return 0
	[ $VERSION -eq 1 ] && options::version && exit 0
	[ $HELP -eq 1 ] && options::usage && exit 0

	COMMAND=$(string::trim "$*")

	[ -z "$COMMAND" ] && \
		utils::fail $EX_USAGE \
								"No command to look after. Use $0 -h to get help"

	local command_template='chapecroned_command() { %s; return $?; }'
	eval "$(printf "$command_template" "$COMMAND")"
}


#
# Configuration
#
declare -A CONFIG=()
declare -a CONFIG_MERGEABLE

CONFIG_MERGEABLE+=('middlewares')

config::dir() {
	local path

	case "$1" in
		sys)
			path="/etc"
			;;
		user)
			# `$(eval echo "~$(whoami)")` seems to be an overly complicated way
			# to get $HOME but Sharness mess with $HOME
			path=$(   ([ -z ${XDG_CONFIG_HOME+x} ] || [ -z "$XDG_CONFIG_HOME" ]) \
							&& echo "$(eval echo "~$(whoami)")/.config" \
							|| echo "$XDG_CONFIG_HOME" \
						)
			;;
	esac

	echo "${path%/}/chapecron/"
	return 0
}

declare -r CONFIG_DIR_SYS=$(config::dir 'sys')
declare -r CONFIG_DIR_USR=$(config::dir 'user')

config::defaults() {
	CONFIG=( ["middlewares"]="" )
}

config::loadfile() {
	local to_load=$1 tmp_conf name value

	[ -e "$to_load" ] || \
		utils::fail $EX_OSFILE \
								"Configuration file $to_load does not exist"

	[ -r "$to_load" ] || \
		utils::fail $EX_OSFILE \
								"Configuration file $to_load can not be read"

	utils::info "Loading configuration from file $to_load"


	tmp_conf=$(mktemp 'chapecron-config.XXXXXXXXXX')
	utils::debug "Temporary configuration file created as $tmp_conf"
	if [ $CHAPECRON_DEBUG -eq 0 ]; then
		trap "{ rm \"$tmp_conf\"; }" EXIT
		utils::debug "Temporary configuration file set to be deleted after execution"
	fi

	grep -vE '^$' "$to_load" | grep -vE '^#' > "$tmp_conf"
	while IFS="=" read -r name value || [ -n "$name" ]; do
		if (array::search "$name" "${CONFIG_MERGEABLE[@]}"); then
			CONFIG["$name"]="$(array::merge "${CONFIG["$name"]}" "$value")"
		else
			CONFIG["$name"]="$value"
		fi
	done < "$tmp_conf"
}

config::load() {

	config::defaults

	if [ -n "$CONFIG_FILE" ]; then
		config::loadfile "$CONFIG_FILE"
	else
		local f
		local -a config_files

		config_files=(
			"${CHAPECRON_PATH_PREFIX%/}${CONFIG_DIR_SYS%/}/chapecron.conf"
			"${CHAPECRON_PATH_PREFIX%/}${CONFIG_DIR_USR%/}/chapecron.conf"
		)

		for f in "${config_files[@]}"; do
			utils::debug "Looking for a configuration file at $f"
			if [ -e "$f" ]; then
				config::loadfile "$f"
			fi
		done
	fi
}


#
# Plugins
#
declare -a AVAILABLE_MIDDLEWARES
declare -r PLUGINS_DIR="$(dirname $(realpath $0))/plugins.d"


plugins::load() {
	local plugin plugin_realpath f functions

	functions=$(declare -F | cut -d ' ' -f3)

	for plugin in "$PLUGINS_DIR"$CHAPECRON_PLUGIN_PATTERN; do

		plugin_realpath="$(realpath "$plugin")"
		if (! echo $plugin_realpath | grep "^$PLUGINS_DIR" > /dev/null); then
			utils::fail $EX_USAGE \
									"Plugins can not be loaded from outside of $PLUGINS_DIR"
		fi

		[ -r "$plugin" ] || \
			utils::fail $EX_NOPERM \
									"Plugin $plugin can not be read"

		utils::debug "Loading plugin from $plugin"
	  source "$plugin"
	done

	for f in $(declare -F | cut -d ' ' -f3); do
		if ( ! array::search "$f" $functions); then
			AVAILABLE_MIDDLEWARES+=("$f")
		fi
	done
}


#
# Stack management
#
declare -a CHAPECRON_STACK=()
declare -i CHAPECRON_STACK_ITERATOR=0

stack::add() {
	CHAPECRON_STACK+=("$@")
}

stack::next() {
	local next=${CHAPECRON_STACK[$CHAPECRON_STACK_ITERATOR]}
	CHAPECRON_STACK_ITERATOR+=1
	$next
}

stack::run() {
	stack::next
	return $?
}

stack::build() {
	local middleware

	stack::add "chapecron::mktmp"
	stack::add "chapecron::capture"

	if [ -n "${CONFIG['middlewares']}" ]; then
		for middleware in $(echo "${CONFIG['middlewares']}" | tr " " "\\n"); do
			if ( ! array::search "$middleware" "${AVAILABLE_MIDDLEWARES[@]}"); then
				utils::fail $EX_CONFIG "Unknown middleware: $middleware"
			fi

			stack::add "$middleware"
		done
	fi

	stack::add "chapecron::command"
}


#
# Execution context
#
context::export() {
	local options_tpl=$'chapecron_rebuild__options() { COMMAND="%s"; VERBOSE=%i; return 0; }'
	eval "$(printf "$options_tpl" "$COMMAND" $VERBOSE)"
	export -f chapecron_rebuild__options

	local config_tpl=$'chapecron_rebuild__config() { %s return 0; }'
	local config_body=""
	local config_entry=$'CONFIG["%s"]="%s"; '
	local key
	for key in "${!CONFIG[@]}"; do
		config_body+="$(printf "$config_entry" "$key" "${CONFIG[$key]}")"
	done
	eval "$(printf "$config_tpl" "$config_body")"
	export -f chapecron_rebuild__config

	local stack_tpl=$'chapecron_rebuild__stack() { %s CHAPECRON_STACK_ITERATOR=%i; return 0; }'
	local stack_body="$(printf $'stack::add "%s"; ' "${CHAPECRON_STACK[@]}")"
	eval "$(printf "$stack_tpl" "$stack_body" $CHAPECRON_STACK_ITERATOR)"
	export -f chapecron_rebuild__stack

	export -f chapecroned_command
}

context::rebuild() {
	chapecron_rebuild__options && unset -f chapecron_rebuild__options
	chapecron_rebuild__config && unset -f chapecron_rebuild__config
	plugins::load
	chapecron_rebuild__stack && unset -f chapecron_rebuild__stack
}


#
# Output
#
declare REPORT_INDENT=""

report::options() {
	utils::info  "${REPORT_INDENT}Command to be monitored: $COMMAND"
	utils::debug "${REPORT_INDENT}-- Command line options detected --"
	if [ $RECALL -eq 0 ]; then
		utils::debug "${REPORT_INDENT}config file = ${CONFIG_FILE:-undefined}"
	else
		utils::debug "${REPORT_INDENT}recall = $RECALL"
	fi
	utils::debug "${REPORT_INDENT}verbose = $VERBOSE"
	utils::debug "${REPORT_INDENT}-- Command line options ends --"
}

report::config() {
	local key

	utils::debug "${REPORT_INDENT}-- Configuration loaded --"
	for key in "${!CONFIG[@]}"; do
		utils::debug "${REPORT_INDENT}$key = ${CONFIG[$key]}"
	done
	utils::debug "${REPORT_INDENT}-- Configuration ends --"
}

report::middlewares() {
	local middleware

	utils::debug "${REPORT_INDENT}-- Middlewares available --"
	for middleware in "${AVAILABLE_MIDDLEWARES[@]}"; do
		utils::debug "${REPORT_INDENT}$middleware"
	done
	utils::debug "${REPORT_INDENT}-- Middlewares ends --"
}

report::stack() {
	local middleware

	utils::debug "${REPORT_INDENT}-- Stack build --"
	for middleware in "${CHAPECRON_STACK[@]}"; do
		utils::debug "${REPORT_INDENT}$middleware"
	done
	utils::debug "${REPORT_INDENT}-- Stack ends --"
}

report::context() {
	utils::debug "-- Context rebuild --"
	REPORT_INDENT+="= "

	report::options
	report::config
	report::middlewares
	report::stack

	REPORT_INDENT="${REPORT_INDENT%= }"
	utils::debug "-- Context ends --"
}

report::trace() {
	echo "chapecron detected failure or error output for the command:"
	echo "$@"
	echo
	echo "RESULT CODE: $RESULT"
	echo
	echo "ERROR OUTPUT:"
	cat "$ERR"
	echo
	echo "STANDARD OUTPUT:"
	cat "$OUT"
	if [ "$TRACE" != "$ERR" ]; then
		echo
		echo "TRACE-ERROR OUTPUT:"
		cat "$TRACE"
	fi
}

#
# Chapecron own middlewares
#
chapecron::mktmp() {
	declare -g TMP
	declare -g OUT
	declare -g ERR
	declare -g TRACE

	TMP=$(mktemp -d 'chapecron.XXXXXXXXXX')
	OUT=$TMP/chapecron.out
	ERR=$TMP/chapecron.err
	TRACE=$TMP/chapecron.trace

	utils::debug "Output files created in $TMP"
	if [ $CHAPECRON_DEBUG -eq 0 ]; then
		trap "{ rm -rf \"$TMP\"; }" EXIT
		utils::debug "Output files set to be deleted after execution"
	fi

	stack::next
	return $?
}

chapecron::capture() {
	set +e
	stack::next >"$OUT" 2>"$TRACE"
	RESULT=$?
	set -e

	PATTERN="^${PS4:0:1}\\+${PS4:1}"
	if grep -aq "$PATTERN" "$TRACE"; then
		! grep -av "$PATTERN" "$TRACE" > "$ERR"
	else
		ERR=$TRACE
	fi

	if ([ $RESULT -ne 0 ] || [ -s "$ERR" ]); then
		utils::error "$(report::trace "$COMMAND")"
	else
		utils::debug "$(cat "$OUT")"
	fi

	return $RESULT
}

chapecron::command() {
	chapecroned_command
	return $?
}


#
# Here we go!
#
dependencies::all
options::get $@

if [ $RECALL -eq 0 ]; then
	report::options
	config::load			&& report::config
	plugins::load			&& report::middlewares
	stack::build			&& report::stack
else
	context::rebuild	&& report::context
fi

stack::run
exit $?
